// TODO: Delete if not used

const fileHelper    = require('../../common/file-helper');
const handlebars    = require('handlebars');
const uniqWith      = require('lodash/uniqWith');
const isEqual       = require('lodash/isEqual');


//NOTE: One ALB per environment
exports.create = async (rootFolderPath, options, withExec) => {
    // create the folder

    // copy the ALB module to the user folder
    var albModulePath = './terraform-modules/aws/alb/';
    var albFolderPath = options.isGlobal ? `${rootFolderPath}/alb` : `${rootFolderPath}/${options.environment}/alb`; // Go inside the alb folder
    await fileHelper.copyFolder(albModulePath, albFolderPath);


    // Process app specific resources. These resources are generated by the applications and since they should be
    // added the the alb module we take care of them here. Particularly combining these resources and handling them
    // from a single point (which is most relevant as well) prevents issues like duplicate SG rules or ALB listeners.
    const appResources = unify(options.appResources);
    console.log(`appResources: ${JSON.stringify(appResources)}`);
    var variableValues = [];
    var listenersAdded = [];
    if (appResources.listeners) {
        const lisnrPms = appResources.listeners.map(async (l, idx) => {
            
            // If the listener (port) is not added already add the listener
            if (listenersAdded.indexOf(l.port) == -1) {
                const listener = await fileHelper.readFile(`${albFolderPath}/listener.handlebars`);
                const listenerTemplate = handlebars.compile(listener);
                const data = {
                    name: l.port,
                    port: l.port,
                    protocol: l.protocol
                }

                await fileHelper.appendToFile(`${albFolderPath}/main.tf`, listenerTemplate({
                    ...data
                }));
                
                // Add the listener to the output

                const output = await fileHelper.readFile(`${albFolderPath}/output.handlebars`);
                const outputTemplate = handlebars.compile(output);
                const outputData = {
                    name: `listener_${l.port}_arn`,
                    value: `\${aws_alb_listener.alb_listener_${l.port}.arn}`
                }

                await fileHelper.appendToFile(`${albFolderPath}/outputs.tf`, outputTemplate({
                    ...outputData
                }));

                // Add security group rule
                const sgRule = await fileHelper.readFile(`${albFolderPath}/security-group-rule.handlebars`);
                const sgRuleTemplate = handlebars.compile(sgRule);
                const variableName = `sg-listener-${l.port}`
                const sgData = {
                    name: variableName,
                    cidrBlock: `\${var.${variableName}}`,
                    fromPort: l.port,
                    toPort: l.port,
                    protocol: "tcp"
                }

                variableValues.push({
                    variable: variableName,
                    value: "0.0.0.0/0"
                })

                await fileHelper.appendToFile(`${albFolderPath}/main.tf`, sgRuleTemplate({
                    ...sgData
                }));

                
            }


            
            
        });
        await Promise.all(lisnrPms);
    }
    
    // add the module to the main.tf file in the root directory

    const use = await fileHelper.readFile(`${albFolderPath}/use.handlebars`);
    const template = handlebars.compile(use);
    const data = {
        albModulePath: options.isGlobal ? '"./alb"' : `"./${options.environment}/alb"`,
        environment: options.isGlobal ? 'main' : `${options.environment}`,
        variableValues
    }

    await fileHelper.appendToFile(`${rootFolderPath}/main.tf`, template({
        data
    }));
    
    const extraVars = await fileHelper.readFile(`${albFolderPath}/variables.handlebars`);
    const extraVarsTemplate = handlebars.compile(extraVars);
    await fileHelper.appendToFile(`${albFolderPath}/variables.tf`, extraVarsTemplate({
        variableValues
    }));

    console.log(`variableValues: ${JSON.stringify(variableValues)}`);

}

const unify = (obj) => {
    var unified = {};
    Object.keys(obj).map((k,n) => {
        unified[k] = obj[k]
        unified[k] = uniqWith(unified[k], isEqual)
    });
    console.log(`unified: ${JSON.stringify(unified)}`);
    return unified;
}

exports.update = async (accountId, options) => {

}

exports.delete = async (accountId, options) => {

}